import sqlite3
from typing import List, Dict, Optional
from pathlib import Path
import logging

class DatabaseManager:
    def __init__(self, db_path: str = 'vulnerabilities.db'):
        self.db_path = db_path
        self.logger = logging.getLogger(__name__)
        self._initialize_db()

    def _initialize_db(self):
        """Cria o banco de dados e tabelas se não existirem"""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            
            # Tabela de hosts
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS hosts (
                    ip TEXT PRIMARY KEY,
                    scan_date TEXT NOT NULL,
                    network TEXT,
                    risk_score REAL DEFAULT 0.0,
                    last_updated TEXT DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Tabela de portas
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS ports (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    host_ip TEXT NOT NULL,
                    port INTEGER NOT NULL,
                    protocol TEXT NOT NULL,
                    service TEXT,
                    version TEXT,
                    FOREIGN KEY(host_ip) REFERENCES hosts(ip) ON DELETE CASCADE,
                    UNIQUE(host_ip, port, protocol)
                )
            ''')
            
            # Tabela de vulnerabilidades
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS vulnerabilities (
                    id TEXT PRIMARY KEY,
                    host_ip TEXT NOT NULL,
                    cvss REAL NOT NULL,
                    description TEXT,
                    FOREIGN KEY(host_ip) REFERENCES hosts(ip) ON DELETE CASCADE
                )
            ''')
            
            # Tabela de recomendações
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS recommendations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    host_ip TEXT NOT NULL,
                    recommendation TEXT NOT NULL,
                    FOREIGN KEY(host_ip) REFERENCES hosts(ip) ON DELETE CASCADE
                )
            ''')
            
            conn.commit()

    def _get_connection(self):
        """Retorna uma conexão com o banco de dados"""
        return sqlite3.connect(self.db_path)

    def save_scan_results(self, scan_data: Dict) -> bool:
        """Salva os resultados de um scan no banco de dados"""
        try:
            with self._get_connection() as conn:
                cursor = conn.cursor()
                
                # Calcula risk_score baseado no CVSS mais alto
                risk_score = max((cve['cvss'] for cve in scan_data.get('cves', [])), default=0.0)
                
                # Insere/atualiza host
                cursor.execute('''
                    INSERT OR REPLACE INTO hosts 
                    (ip, scan_date, network, risk_score)
                    VALUES (?, ?, ?, ?)
                ''', (
                    scan_data['ip'],
                    scan_data['date'],
                    scan_data['network'],
                    risk_score
                ))
                
                # Insere portas
                for port in scan_data.get('open_ports', []):
                    cursor.execute('''
                        INSERT OR IGNORE INTO ports
                        (host_ip, port, protocol, service, version)
                        VALUES (?, ?, ?, ?, ?)
                    ''', (
                        scan_data['ip'],
                        port['port'],
                        port['protocol'],
                        port['service'],
                        port.get('version', '')
                    ))
                
                # Insere vulnerabilidades
                for cve in scan_data.get('cves', []):
                    cursor.execute('''
                        INSERT OR REPLACE INTO vulnerabilities
                        (id, host_ip, cvss, description)
                        VALUES (?, ?, ?, ?)
                    ''', (
                        cve['id'],
                        scan_data['ip'],
                        cve['cvss'],
                        cve.get('description', '')
                    ))
                
                # Insere recomendações
                for recommendation in scan_data.get('recommendations', []):
                    cursor.execute('''
                        INSERT OR IGNORE INTO recommendations
                        (host_ip, recommendation)
                        VALUES (?, ?)
                    ''', (
                        scan_data['ip'],
                        recommendation
                    ))
                
                conn.commit()
                return True
                
        except sqlite3.Error as e:
            self.logger.error(f"Erro ao salvar scan no banco de dados: {e}")
            return False

    def get_hosts(self) -> List[Dict]:
        """Retorna todos os hosts escaneados"""
        with self._get_connection() as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM hosts ORDER BY last_updated DESC')
            return [dict(row) for row in cursor.fetchall()]

    def get_host_details(self, ip: str) -> Optional[Dict]:
        """Retorna detalhes de um host específico"""
        with self._get_connection() as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # Host info
            cursor.execute('SELECT * FROM hosts WHERE ip = ?', (ip,))
            host = cursor.fetchone()
            if not host:
                return None
                
            host = dict(host)
            
            # Portas
            cursor.execute('SELECT * FROM ports WHERE host_ip = ?', (ip,))
            host['ports'] = [dict(row) for row in cursor.fetchall()]
            
            # Vulnerabilidades
            cursor.execute('SELECT * FROM vulnerabilities WHERE host_ip = ?', (ip,))
            host['vulnerabilities'] = [dict(row) for row in cursor.fetchall()]
            
            # Recomendações
            cursor.execute('SELECT recommendation FROM recommendations WHERE host_ip = ?', (ip,))
            host['recommendations'] = [row[0] for row in cursor.fetchall()]
            
            return host