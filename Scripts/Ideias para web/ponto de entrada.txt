#!/usr/bin/env python3
from scanner.core import VulnerabilityScanner
from scanner.database import DatabaseManager
import logging
import argparse

def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('scanner.log'),
            logging.StreamHandler()
        ]
    )

def main():
    parser = argparse.ArgumentParser(description='Vulnerability Scanner')
    parser.add_argument('--network', help='Network to scan (e.g., 192.168.1.0/24)')
    parser.add_argument('--host', help='Single host to scan')
    args = parser.parse_args()

    setup_logging()
    
    # Inicializa scanner e banco de dados
    scanner = VulnerabilityScanner(args.network)
    db = DatabaseManager()
    
    if not scanner.verify_dependencies():
        print("Erro: Dependências não atendidas. Verifique scanner.log")
        return
    
    if args.host:
        # Modo host único
        scan_data = scanner.scan_host(args.host)
        if 'error' not in scan_data:
            db.save_scan_results(scan_data)
            print(f"Scan concluído para {args.host}")
    else:
        # Modo rede completa
        print(f"Iniciando scan na rede: {scanner.network}")
        results = scanner.scan_network()
        
        # Salva resultados no banco de dados
        for ip, scan_data in results.items():
            if 'error' not in scan_data:
                db.save_scan_results(scan_data)
        
        print(f"Scan concluído. {len(results)} hosts processados.")

if __name__ == '__main__':
    main()