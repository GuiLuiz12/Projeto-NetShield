#!/bin/bash

REDE=${1:-$(ip -o -f inet addr show | awk '/scope global/ {print $4}' | head -n1)}
DATA_HORA=$(date +"%Y%m%d_%H%M")
DIR_RELATORIOS="relatorios_scan_$DATA_HORA"
mkdir -p "$DIR_RELATORIOS"

VERDE='\033[0;32m'
VERMELHO='\033[0;31m'
AZUL='\033[0;34m'
AMARELO='\033[1;33m'
NC='\033[0m'

verify_dependencies() {
    echo -e "${AZUL}[*] Verificando dependências...${NC}"
    
    if ! command -v nmap &> /dev/null; then
        echo -e "${AMARELO}[+] Instalando Nmap...${NC}"
        sudo apt update && sudo apt install -y nmap
    fi
    
    if [ ! -f "/usr/share/nmap/scripts/vulners.nse" ]; then
        echo -e "${AMARELO}[+] Instalando vulners.nse...${NC}"
        sudo wget -q https://github.com/vulnersCom/nmap-vulners/raw/master/vulners.nse -O /usr/share/nmap/scripts/vulners.nse
        if ! sudo nmap --script-updatedb; then
            echo -e "${VERMELHO}[!] Falha ao atualizar banco de dados de scripts NSE${NC}"
            exit 1
        fi
    fi
    
    local missing_scripts=()
    [ ! -f "/usr/share/nmap/scripts/http-vulners.nse" ] && missing_scripts+=("http-vulners")
    [ ! -f "/usr/share/nmap/scripts/ssh-enum-algos.nse" ] && missing_scripts+=("ssh-enum-algos")
    
    if [ ${#missing_scripts[@]} -gt 0 ]; then
        echo -e "${VERMELHO}[!] Scripts opcionais faltando: ${missing_scripts[*]}${NC}"
        echo -e "${AMARELO}    Algumas verificações serão limitadas.${NC}"
        read -p "Deseja instalar os scripts faltantes? (s/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Ss]$ ]]; then
            for script in "${missing_scripts[@]}"; do
                case $script in
                    "http-vulners")
                        echo -e "${AMARELO}[+] Instalando http-vulners.nse...${NC}"
                        sudo wget -q https://raw.githubusercontent.com/scipag/vulscan/master/http-vulners-regex.nse -O /usr/share/nmap/scripts/http-vulners.nse
                        ;;
                    "ssh-enum-algos")
                        echo -e "${AMARELO}[+] Instalando ssh-enum-algos.nse...${NC}"
                        sudo wget -q https://raw.githubusercontent.com/scipag/vulscan/master/ssh-vulners.nse -O /usr/share/nmap/scripts/ssh-enum-algos.nse
                        ;;
                esac
            done
            if ! sudo nmap --script-updatedb; then
                echo -e "${VERMELHO}[!] Falha ao atualizar banco de dados de scripts NSE${NC}"
                exit 1
            fi
        fi
    fi
}

generate_json_report() {
    local IP=$1
    local RELATORIO_JSON="$DIR_RELATORIOS/scan_${IP}_${DATA_HORA}.json"
    local TMP_FILE="$DIR_RELATORIOS/scan_${IP}_${DATA_HORA}.txt.tmp"

    if [ ! -f "$TMP_FILE" ]; then
        echo -e "${VERMELHO}[!] Arquivo temporário não encontrado: $TMP_FILE${NC}"
        return 1
    fi

    echo -e "${AMARELO}[DEBUG] Analisando arquivo temporário para $IP...${NC}"
    grep -E "(open|CVE-)" "$TMP_FILE" | head -n 20 | while read -r line; do
        echo -e "${AMARELO}| $line${NC}"
    done

    echo "{" > "$RELATORIO_JSON"
    echo "\"ip\": \"$IP\"," >> "$RELATORIO_JSON"
    echo "\"date\": \"$(date -Is)\"," >> "$RELATORIO_JSON"
    echo "\"network\": \"$REDE\"," >> "$RELATORIO_JSON"
    
    echo "\"open_ports\": [" >> "$RELATORIO_JSON"
    if grep -q -E "[0-9]+/(tcp|udp)[[:space:]]+open" "$TMP_FILE"; then
        grep -E "[0-9]+/(tcp|udp)[[:space:]]+open" "$TMP_FILE" | awk '{
            split($1, port_proto, "/");
            service = $3;
            version = "";
            for (i=4; i<=NF; i++) version = version " " $i;
            gsub(/"/, "\\\"", service);
            gsub(/"/, "\\\"", version);
            printf "{\"port\": %d, \"protocol\": \"%s\", \"service\": \"%s\", \"version\": \"%s\"},\n", 
            port_proto[1], port_proto[2], service, substr(version,2)
        }' | sed '$ s/,$//' >> "$RELATORIO_JSON"
    else
        echo -e "${VERMELHO}[!] Nenhuma porta aberta detectada no arquivo${NC}" >&2
    fi
    echo "]," >> "$RELATORIO_JSON"
    
    echo "\"cves\": [" >> "$RELATORIO_JSON"
    if grep -q -E "CVE-[0-9]{4}-[0-9]+" "$TMP_FILE"; then
        grep -E "CVE-[0-9]{4}-[0-9]+" "$TMP_FILE" | awk '{
            cve = $1;
            cvss = "0.0";
            desc = $0;
            
            if (match(desc, /[0-9]+\.[0-9]/)) {
                cvss = substr(desc, RSTART, RLENGTH);
                desc = substr(desc, RSTART + RLENGTH + 1);
            }
            
            gsub(/"/, "\\\"", desc);
            gsub(/\\/, "", desc);
            printf "{\"id\": \"%s\", \"cvss\": %s, \"description\": \"%s\"},\n", 
            cve, cvss, desc
        }' | sed '$ s/,$//' >> "$RELATORIO_JSON"
    else
        echo -e "${VERMELHO}[!] Nenhum CVE detectado no arquivo${NC}" >&2
    fi
    echo "]" >> "$RELATORIO_JSON"
    
    echo "}" >> "$RELATORIO_JSON"
    
    if ! jq empty "$RELATORIO_JSON" 2>/dev/null; then
        echo -e "${VERMELHO}[!] JSON inválido gerado, criando fallback${NC}" >&2
        echo "{\"error\": \"Falha ao gerar JSON\", \"ip\": \"$IP\", \"raw_file\": \"$TMP_FILE\"}" > "$RELATORIO_JSON"
    fi
    
    echo -e "${VERDE}[+] Relatório JSON salvo: $RELATORIO_JSON${NC}"
}

scan_ip() {
    local IP=$1
    local RELATORIO="$DIR_RELATORIOS/scan_${IP}_${DATA_HORA}.txt"
    local TMP_FILE="$RELATORIO.tmp"
    local SCAN_CMD="sudo nmap -sV --script vulners --script-args mincvss=5.0"
    
    echo "=== RELATÓRIO DE VULNERABILIDADES ===" > "$RELATORIO"
    echo "Data: $(date)" >> "$RELATORIO"
    echo "Alvo: $IP" >> "$RELATORIO"
    echo "Rede: $REDE" >> "$RELATORIO"
    
    [ -f "/usr/share/nmap/scripts/http-vulners.nse" ] && SCAN_CMD+=",http-vulners"
    [ -f "/usr/share/nmap/scripts/ssh-enum-algos.nse" ] && SCAN_CMD+=",ssh-enum-algos"
    
    SCAN_CMD+=" -T4 --top-ports 1000 $IP"
    echo -e "${AZUL}[*] Executando scan em $IP...${NC}"
    $SCAN_CMD -oN "$TMP_FILE" 2>/dev/null
    
    if grep -q -E "open.*(http|ssl|ssh|rdp|ftp|smtp)" "$TMP_FILE"; then
        echo -e "${AZUL}[*] Serviços críticos detectados, scan completo...${NC}"
        sudo nmap -sV --script "vulners and safe" -p- --min-rate 5000 "$IP" -oN "$TMP_FILE.full" 2>/dev/null
        cat "$TMP_FILE.full" >> "$TMP_FILE"
        rm -f "$TMP_FILE.full"
    fi
    
    process_results "$IP" "$RELATORIO" "$TMP_FILE"
    generate_json_report "$IP"
    
    rm -f "$TMP_FILE"
}

process_results() {
    local IP=$1
    local RELATORIO=$2
    local TMP_FILE=$3
    
    echo -e "\n[PORTAS ABERTAS]" >> "$RELATORIO"
    grep -E "[0-9]+/(tcp|udp).*open" "$TMP_FILE" | awk '{print $1,$3,$4,$5}' >> "$RELATORIO"
    
    echo -e "\n[CVEs ENCONTRADOS]" >> "$RELATORIO"
    if grep -q -E "CVE-[0-9]{4}-[0-9]+" "$TMP_FILE"; then
        grep -E "CVE-[0-9]{4}-[0-9]+" "$TMP_FILE" | sort | uniq >> "$RELATORIO"
    else
        echo "Nenhum CVE crítico encontrado (CVSS >= 5.0)." >> "$RELATORIO"
    fi
    
    generate_recommendations "$RELATORIO" "$TMP_FILE"
    echo -e "${VERDE}[+] Relatório TXT salvo: $RELATORIO${NC}"
}

generate_recommendations() {
    local RELATORIO=$1
    local TMP_FILE=$2
    
    echo -e "\n[RECOMENDAÇÕES]" >> "$RELATORIO"
    
    grep -q "open.*http" "$TMP_FILE" && echo "- [HTTP] Verificar headers de segurança e atualizar servidor web" >> "$RELATORIO"
    grep -q "open.*ssl" "$TMP_FILE" && echo "- [SSL] Verificar certificados e desativar protocolos inseguros (SSLv2/SSLv3)" >> "$RELATORIO"
    grep -q "open.*ssh" "$TMP_FILE" && echo "- [SSH] Desativar login root e usar autenticação por chaves" >> "$RELATORIO"
    grep -q "open.*msrpc" "$TMP_FILE" && echo "- [MSRPC] Restringir acesso via firewall e verificar atualizações" >> "$RELATORIO"
    grep -q "open.*ftp" "$TMP_FILE" && echo "- [FTP] Desativar FTP não criptografado (usar SFTP/FTPS)" >> "$RELATORIO"
    
    echo "- Atualizar todos os serviços listados" >> "$RELATORIO"
    echo "- Fechar portas não utilizadas" >> "$RELATORIO"
    echo "- Implementar regras de firewall específicas" >> "$RELATORIO"
    echo "- Monitorar logs de acesso aos serviços expostos" >> "$RELATORIO"
}

clear
echo -e "${VERDE}==== KALI LINUX VULNERABILITY SCANNER ====${NC}"
echo -e "Rede detectada: ${VERMELHO}$REDE${NC}"
echo -e "Data da análise: ${VERMELHO}$(date)${NC}"

verify_dependencies

HOSTS_ATIVOS=$(sudo nmap -sn "$REDE" -oG - | awk '/Up$/{print $2}')
echo -e "${VERDE}[+] Hosts ativos encontrados:${NC}"
echo "$HOSTS_ATIVOS"

for ip in $HOSTS_ATIVOS; do
    scan_ip "$ip"
done

echo -e "\n${VERDE}[+] Análise concluída!${NC}"
echo -e "Relatórios salvos em: ${VERMELHO}$DIR_RELATORIOS/${NC}"
echo -e "Para ver um relatório: ${AZUL}cat $DIR_RELATORIOS/scan_<IP>_*.txt${NC}"
echo -e "Para processar os dados para o dashboard: ${AMARELO}python3 processor.py $DIR_RELATORIOS${NC}"
echo -e "Para excluir todos os relatórios: ${VERMELHO}rm -rf $DIR_RELATORIOS${NC}"