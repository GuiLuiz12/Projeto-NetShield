#!/bin/bash

# --- Configurações Iniciais ---
REDE=${1:-$(ip -o -f inet addr show | awk '/scope global/ {print $4}' | head -n1)}
DATA_HORA=$(date +"%Y%m%d_%H%M")
DIR_RELATORIOS="relatorios_scan_$DATA_HORA"
mkdir -p "$DIR_RELATORIOS"

# --- Cores para terminal ---
VERDE='\033[0;32m'
VERMELHO='\033[0;31m'
AZUL='\033[0;34m'
AMARELO='\033[1;33m'
NC='\033[0m' # No Color

# --- Verificação e Instalação de Dependências ---
verify_dependencies() {
    echo -e "${AZUL}[*] Verificando dependências...${NC}"
    
    # Instala Nmap se não existir
    if ! command -v nmap &> /dev/null; then
        echo -e "${AMARELO}[+] Instalando Nmap...${NC}"
        sudo apt update && sudo apt install -y nmap
    fi
    
    # Instala vulners.nse se não existir
    if [ ! -f "/usr/share/nmap/scripts/vulners.nse" ]; then
        echo -e "${AMARELO}[+] Instalando vulners.nse...${NC}"
        sudo wget -q https://github.com/vulnersCom/nmap-vulners/raw/master/vulners.nse -O /usr/share/nmap/scripts/vulners.nse
        sudo nmap --script-updatedb
    fi
    
    # Verifica scripts adicionais
    local missing_scripts=()
    [ ! -f "/usr/share/nmap/scripts/http-vulners.nse" ] && missing_scripts+=("http-vulners")
    [ ! -f "/usr/share/nmap/scripts/sshvuln.nse" ] && missing_scripts+=("sshvuln")
    
    if [ ${#missing_scripts[@]} -gt 0 ]; then
        echo -e "${VERMELHO}[!] Scripts opcionais faltando: ${missing_scripts[*]}${NC}"
        echo -e "${AMARELO}    Algumas verificações serão limitadas.${NC}"
        read -p "Deseja instalar os scripts faltantes? (s/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Ss]$ ]]; then
            for script in "${missing_scripts[@]}"; do
                case $script in
                    "http-vulners")
                        sudo wget -q https://raw.githubusercontent.com/psychomuggins/nmap-nse-scripts/master/http-vulners.nse -O /usr/share/nmap/scripts/http-vulners.nse
                        ;;
                    "sshvuln")
                        sudo wget -q https://raw.githubusercontent.com/cldrn/nmap-nse-scripts/master/ssh2-enum-algos.nse -O /usr/share/nmap/scripts/ssh-enum-algos.nse
                        ;;
                esac
            done
            sudo nmap --script-updatedb
        fi
    fi
}

# --- Função de Scan Aprimorada ---
scan_ip() {
    local IP=$1
    local RELATORIO="$DIR_RELATORIOS/scan_${IP}_${DATA_HORA}.txt"
    local SCAN_CMD="sudo nmap -sV --script vulners --script-args mincvss=5.0"
    
    echo -e "\n${AZUL}[*] Analisando $IP...${NC}"
    
    # Cabeçalho do relatório
    echo "=== RELATÓRIO DE VULNERABILIDADES ===" > "$RELATORIO"
    echo "Data: $(date)" >> "$RELATORIO"
    echo "Alvo: $IP" >> "$RELATORIO"
    echo "Rede: $REDE" >> "$RELATORIO"
    
    # Adiciona scripts adicionais se existirem
    [ -f "/usr/share/nmap/scripts/http-vulners.nse" ] && SCAN_CMD+=",http-vulners"
    [ -f "/usr/share/nmap/scripts/ssh-enum-algos.nse" ] && SCAN_CMD+=",ssh-enum-algos"
    
    # Primeiro scan (rápido)
    SCAN_CMD+=" -T4 --top-ports 1000 $IP"
    echo -e "${AZUL}[*] Executando scan rápido...${NC}"
    $SCAN_CMD -oN "$RELATORIO.tmp" 2>/dev/null
    
    # Scan completo se portas interessantes forem encontradas
    if grep -q -E "open.*(http|ssl|ssh|rdp|ftp|smtp)" "$RELATORIO.tmp"; then
        echo -e "${AZUL}[*] Serviços críticos detectados, executando scan completo...${NC}"
        sudo nmap -sV --script "vulners and safe" -p- --min-rate 5000 "$IP" -oN "$RELATORIO.tmp.full"
        cat "$RELATORIO.tmp.full" >> "$RELATORIO.tmp"
        rm -f "$RELATORIO.tmp.full"
    fi
    
    # Processa resultados
    process_results "$IP" "$RELATORIO"
}

process_results() {
    local IP=$1
    local RELATORIO=$2
    
    echo -e "\n[PORTAS ABERTAS]" >> "$RELATORIO"
    grep -E "^[0-9]+/tcp|^[0-9]+/udp" "$RELATORIO.tmp" | awk '{print $1,$3,$4,$5}' >> "$RELATORIO"
    
    echo -e "\n[CVEs ENCONTRADOS]" >> "$RELATORIO"
    local cves=$(grep "CVE-" "$RELATORIO.tmp" | sort | uniq)
    
    if [ -z "$cves" ]; then
        echo "Nenhum CVE crítico encontrado (CVSS >= 5.0)." >> "$RELATORIO"
        echo -e "\n[CVEs HISTÓRICOS POSSÍVEIS]" >> "$RELATORIO"
        grep -E "open.*(msrpc|dcom|rpc)" "$RELATORIO.tmp" | while read -r line; do
            local port=$(echo "$line" | awk '{print $1}' | cut -d'/' -f1)
            local service=$(echo "$line" | awk '{print $3}')
            echo -e "\nPossíveis vulnerabilidades RPC para $service (porta $port):" >> "$RELATORIO"
            searchsploit "$service" | grep -i "rpc" | head -n 5 >> "$RELATORIO"
        done
    else
        echo "$cves" >> "$RELATORIO"
    fi
    
    generate_recommendations "$RELATORIO" "$RELATORIO.tmp"
    rm -f "$RELATORIO.tmp"
    echo -e "${VERDE}[+] Relatório salvo em: $RELATORIO${NC}"
}

generate_recommendations() {
    local RELATORIO=$1
    local TMP_FILE=$2
    
    echo -e "\n[RECOMENDAÇÕES]" >> "$RELATORIO"
    
    # Recomendações baseadas em serviços
    grep -q "open.*http" "$TMP_FILE" && echo "- [HTTP] Verificar headers de segurança e atualizar servidor web" >> "$RELATORIO"
    grep -q "open.*ssl" "$TMP_FILE" && echo "- [SSL] Verificar certificados e desativar protocolos inseguros (SSLv2/SSLv3)" >> "$RELATORIO"
    grep -q "open.*ssh" "$TMP_FILE" && echo "- [SSH] Desativar login root e usar autenticação por chaves" >> "$RELATORIO"
    grep -q "open.*msrpc" "$TMP_FILE" && echo "- [MSRPC] Restringir acesso via firewall e verificar atualizações" >> "$RELATORIO"
    grep -q "open.*ftp" "$TMP_FILE" && echo "- [FTP] Desativar FTP não criptografado (usar SFTP/FTPS)" >> "$RELATORIO"
    
    # Recomendações gerais
    echo "- Atualizar todos os serviços listados" >> "$RELATORIO"
    echo "- Fechar portas não utilizadas" >> "$RELATORIO"
    echo "- Implementar regras de firewall específicas" >> "$RELATORIO"
    echo "- Monitorar logs de acesso aos serviços expostos" >> "$RELATORIO"
}

# --- Execução Principal ---
clear
echo -e "${VERDE}==== KALI LINUX VULNERABILITY SCANNER ====${NC}"
echo -e "Rede detectada: ${VERMELHO}$REDE${NC}"
echo -e "Data da análise: ${VERMELHO}$(date)${NC}"

verify_dependencies

# Detecta hosts ativos
echo -e "${AZUL}[*] Detectando hosts ativos...${NC}"
HOSTS_ATIVOS=$(sudo nmap -sn "$REDE" -oG - | awk '/Up$/{print $2}')
echo -e "${VERDE}[+] Hosts ativos encontrados:${NC}"
echo "$HOSTS_ATIVOS"

# Executa scan para cada host
for ip in $HOSTS_ATIVOS; do
    scan_ip "$ip"
done

echo -e "\n${VERDE}[+] Análise concluída!${NC}"
echo -e "Relatórios salvos em: ${VERMELHO}$DIR_RELATORIOS/${NC}"
echo -e "Para ver um relatório: ${AZUL}cat $DIR_RELATORIOS/scan_<IP>_*.txt${NC}"
echo -e "Para excluir todos os relatórios: ${VERMELHO}rm -rf $DIR_RELATORIOS${NC}"
